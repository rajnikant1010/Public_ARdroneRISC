<launch>
	<!-- Get Cortex marker data Streaming -->
  <node pkg="cortex_ros" type="stream_markers" name="stream_markers" output="screen">
  </node>

	<!-- Get Cortex State estimation given Templates -->
  <node pkg="risc_estimation" type="states_estimation.py" name="states_estimation" output="screen">
  </node>

	<!-- Get Controls -->
  <node pkg="risc_control" type="Traj_shaping.py" name="controller" output="screen">
  </node>

	<!-- Publish Trajectory -->
  <node pkg="risc_control" type="TS_virtual_target.py" name="trajectory" output="screen">
  </node>

	<!-- Launch the AR.Drone driver -->
	<node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" clear_params="true">
	<!-- Set up rosparams for saturation values and agressiveness -->
	    <param name="outdoor" value="0" />				<!-- If we are flying outdoors, will select more aggressive default settings -->
	    <param name="flight_without_shell" value="0" /> <!-- Changes internal controller gains if we are flying without the propeller guard -->
	    
	    <param name="altitude_max" value="3000" />		<!-- in millimeters = 3 meters = 9' -->
        <param name="altitude_min" value="50" />		<!-- in millimeters = 5cm = 2" -->
        <param name="euler_angle_max" value="0.349066" />	<!-- maximum allowable body angle in radians = 5 degrees -->
        <param name="control_vz_max" value="1000" />		<!-- maximum z velocity in mm/sec = 0.2m/sec -->
	    <param name="control_yaw" value=".349066" />		<!-- maximum rotation rate in radians/sec = 40 degrees per second (1/9 rev/sec) -->

	    <param name="detect_type" value="10" />
	    <param name="detections_select_h" value="32" />	<!-- In the horizontal camera, look for the orange-blue-orange markers -->
	    <param name="detections_select_v_hsync" value="128" />  <!-- In the vertical camera, detect the A4 marker -->
	    <param name="enemy_colors" value="3" />			<!-- Orange-Blue-Orange = 3 -->
	    <param name="enemy_without_shell" value="0" />	<!-- Detect the indoor stickers, rather than the outdoor hull -->
	</node>

<!-- Launch the joystick publisher -->
	<node name="joy_node" pkg="joy" type="joy_node" output="screen" clear_params="true">
        <!-- Tell the computer where the joystick is connected. If you don't know enter in terminal$ ls /dev/input and you should see something similar to the value below.-->
	<param name="dev" type="str" value="/dev/input/js0"/>
	</node>

<!-- Launch the joystick controller -->
	<node name="joystick_controller" pkg="risc_control" type="risc_controller.py" output="screen" required="true">
		
		<!-- Configures the joystick button mapping -->
		<param name="JoytoWay"	                value="0" />
		<param name="ButtonEmergency"	        value="2" />
		<param name="TakeoffLand"	        value="6" />
		<param name="Up"	         	value="9" />
		<param name="Down"			value="10" />
		<param name="ShutDownNode"		value="7" />
		

		<!-- Configures the joystick axis mapping -->
		<param name="AxisRoll"			value="6" />
		<param name="AxisPitch"			value="7" />
		<param name="AxisYaw"			value="3" />

		<!-- Configures the joystick mapping -->
		<param name="ScaleRoll"			value="3" />
		<param name="ScalePitch"		value="3" />
		<param name="ScaleYaw"			value="1" />
		<param name="ScaleZ"			value="1" />

		<!-- Configures Transition State Variables -->
		<param name="Simulation"		value="False" />
		<param name="delay"	        	value="0.3" />
		<param name="/controller_status"		value="False" />

	</node>
</launch>
