#!/usr/bin/env python

'''======================================================
 NEW DF PARW_ABHI
 ======================================================'''
    #=======================#
    #    Libraries Needed   #
    #=======================#


#import roslib; roslib.load_manifest('ardrone_tutorials')
#roslib.load_manifest('risc_msgs')
import rospy
from  math import *
import rospkg
import numpy as np
import scipy.linalg as la
import time

    #=======================#
    #    Messages Needed    #
    #=======================#

#from risc_msgs.msg import *
#from ardrone_autonomy.msg import Navdata
#from sensor_msgs.msg import Joy
from geometry_msgs.msg import PointStamped
from std_msgs.msg import Empty
from std_msgs.msg import Float64
from /home/anusna_risc/ros_workspace/src/fcu_common.msg import ExtendedCommand

    #========================#
    #        Globals         #
    #========================#

PI 	        = 3.141592653589793
Threshold 	= 1000
#states          = Cortex()
#states.Obj      = [States()]*1
euler_max       = 0.349066 #in radians
max_yaw_rate    = 0.3490659 #in radians/sec
max_alt_rate    = 1000     # in mm/sec
rate            = 200      # Hz
start_time      = 0
#back            = 0
#forward         = 0
#mode            = 1 # mode of 4 listed under cases
#old_mode        = 0
#cases           = ['Origin','Slanted Figure Eight','Origin',\
#                   'Flat Figure Eight','Origin','Circle']
    #==================#
    #    Publishers    #
    #==================#

#pubTakeoff      = rospy.Publisher('/ardrone/takeoff',Empty, queue_size = 1)
pub_fcu        = rospy.Publisher('/extended_command', fcu_common, queue_size = 1)
#pub_traj        = rospy.Publisher('/trajectory', Trajectories, queue_size = 1)


    #========================#
    #    Basic Controller    #
    #========================#

def Basic_Controller(traj,K):
    global states,PI, euler_max, max_yaw_rate, max_alt_rate, pub_ctrl

    #rospy.loginfo("In Basic controller")
    fcu        = fcu_common()
    # Initiate Control Messages
    bodies = 1
    fcu.Obj = [fcu_common()]*bodies
    #fcu.header.stamp = states.header.stamp
    g = 9.81
    m = 0.450 # ARDrone mass

        #===================================#
        #    Get State Trajectory Errors    #
        #===================================#

    #if traj.Obj[0].name == "DF":
    X = np.asmatrix(np.zeros((7,1)))
    X[0] = traj.Obj[0].x-states.Obj[0].x
    X[1] = traj.Obj[0].y-states.Obj[0].y
    X[2] = traj.Obj[0].z-states.Obj[0].z
    X[3] = traj.Obj[0].xdot-states.Obj[0].u
    X[4] = traj.Obj[0].ydot-states.Obj[0].v
    X[5] = traj.Obj[0].zdot-states.Obj[0].w
    X[6] = pi2pi(traj.Obj[0].psi)-states.Obj[0].psi*PI/180

        #============================================#
        #     Differential Flatness Control Input    #
        #============================================#

        # LQR input
    utilde = -K*X
        # required input
    #    Messages Needed    #
    u_r = np.matrix([[traj.Obj[0].xddot],[traj.Obj[0].yddot],[traj.Obj[0].zddot],[traj.Obj[0].psiddot]])
    u = utilde-u_r+np.matrix([[0],[0],[9.81],[0]])

        #==================================#
        #     Rotate to Vehicle 1 Frame    #
        #==================================#

    psi = states.Obj[0].psi*PI/180 #psi is negative in first quadrant
    rotZ = np.matrix([[cos(-psi), -sin(-psi), 0],[sin(-psi), cos(-psi), 0],[0, 0, 1]])
    Cart = np.matrix([[-1, 0, 0],[0, -1, 0],[0, 0, 1]]) # fix x and y directions
    u[:-1] = Cart*rotZ*u[:-1]

        #u = np.matrix([[0],[-0.1],[9.8],[0]])
        #print u

        #===================================#
        #     Normalize given the Thrust    #
        #===================================#

    T = sqrt(u[0,-1]*u[0,-1]+u[1,-1]*u[1,-1]+u[2,-1]*u[2,-1])
    u[:-1] = np.divide(u[:-1],T)
        #==================#
        #   Set Controls   #
        #==================#

        # Controls for Ardrone
        # -phi = right... +phi = left
        # -theta = back... +theta = forward
        # -psi = right...  +psi = left
    fcu        = fcu_common()
    fcu.name   = states.Obj[0].name
        #ctrl.phi    = atan2(u[1,-1],u[2,-1])/euler_max
    fcu.phi    = 0.5
        #ctrl.theta  = asin(u[0,-1])/euler_max
    fcu.theta  = 0.5
    fcu.psi    = 0.5
    fcu.T      = 0.5
    fcu.Obj[0] = fcu
    #fcu.header = states.header
        #rospy.loginfo("latency = %f",states.header.stamp.to_sec()-rospy.get_time())
    pub_fcu.publish(fcu)

    
    #===================#
    #       Main        #
    #===================#

if __name__=='__main__':
    import sys
    rospy.init_node('LQR')#LQR Name doesnt affect anything.....

    #=======================#
    #    quad parameters    #
    #=======================#

    euler_max    = float(rospy.get_param("euler_angle_max","0.349066")) #in radians
    max_yaw_rate = float(rospy.get_param("control_yaw",".3490659")) #in radians/sec
    max_alt_rate = float(rospy.get_param("control_vz_max","1000")) #in mm/sec
    switch_time = rospy.get_time()

    #=====================================#
    #    Set up Publish/Subscribe Loop    #
    #=====================================#

    #r = rospy.Rate(30)
    while not rospy.is_shutdown():
        #sub_cortex  = rospy.Subscriber('/cortex_raw' , Cortex, GetStates)
        #blub = rospy.Subscriber('/trajectory' , Trajectories, GetTrajectory)
    	rospy.spin()
        #r.sleep()

